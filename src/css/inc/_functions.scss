@function add-comment-tag($tag, $input) {
    @return unquote('/* @' + $tag + ' */') $input;
}

// https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

@function inline-url($url) {
    @return add-comment-tag('inline', url('#{$url}'));
}

@function asset-url($url) {
    @return url(asset($url));
}

// Computes the "brightness" of a color
//
// Brightness is similiar to lightness in HSL but more closely approximates
// how humans perceive the intensity of the different RGB components of
// a color. Brightness is sometimes called luminance.
//
// Returns a number between 0% and 100%, where 100% is fully bright
// (white) and 0% is fully dark (black) for color values.
//
// For numbers and percentages it returns the same value to be used
// in `@include filter(brightness(1.1))`.
@function brightness($color) {
    @if type-of($color) == color {
        @return ((red($color) * 0.299) + (green($color) * 0.587) + (blue($color) * 0.114)) / 255 * 100%;
    } @else {
        @return unquote('brightness(#{$color})');
    }
}

$contrasted-dark-default: #000 !default;
$contrasted-light-default: #fff !default;

// Returns either the `$light` or `$dark` color
// by deciding which contrasts more with `$color`.
//
// E.g. This can be used to select the more readable foreground color
// for a given background color.
//
// `$dark` defaults to black and `$light` defaults to white.
//
// When `$color` is `null`, this function returns `null`.
@function contrast-color($color, $dark: $contrasted-dark-default, $light: $contrasted-light-default) {
    @if $color == null {
        @return null;
    } @else {
        $color-brightness: brightness($color);
        $dark-text-brightness: brightness($dark);
        $light-text-brightness: brightness($light);

        @return if(
            abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness),
            $light,
            $dark
        );
    }
}

// Sets the specified background color and calculates a dark or light
// contrasted text color.  The arguments are passed through to the
// [contrast-color function](#function-contrast-color).
@mixin contrasted($background-color, $dark: $contrasted-dark-default, $light: $contrasted-light-default) {
    $color: contrast-color($background-color, $dark, $light);
    background-color: $background-color;
    color: $color;
}
